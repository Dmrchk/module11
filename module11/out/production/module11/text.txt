//first 2 tasks interface

public interface NeedToBeSorted {
    public Object sortable(List<String> names);
}

//task1

//private String noTwo = "";
NeedToBeSorted sorted = names -> {
        return IntStream.range(0, names.size())
                  .filter(i -> i % 2 != 0)
                  .mapToObj(index -> index + ". " + names.get(index))
                  .collect(Collectors.joining(", "));
        };

//task2

NeedToBeSorted sorted = names -> {
        return names.stream()
                .map(String::toUpperCase)
                .sorted(Comparator.reverseOrder())
                .collect(Collectors.toList());
    };

//task3

public String sortedArray(String[] arr){
        return Arrays
                .stream(arr)
                .map(s -> s.replaceAll("\\D", ""))
                .map(s -> s.split(""))
                .flatMap(Arrays::stream)
                .sorted()
                .collect(Collectors.joining(", "));
    }
